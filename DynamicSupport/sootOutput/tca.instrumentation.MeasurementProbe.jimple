public abstract class tca.instrumentation.MeasurementProbe extends java.lang.Object implements tca.instrumentation.Probe
{
    protected java.lang.Integer currentSize;
    protected java.util.HashMap measurements;

    public void <init>()
    {
        tca.instrumentation.MeasurementProbe r0;
        java.lang.Integer $r1;
        java.util.HashMap $r2;

        r0 := @this: tca.instrumentation.MeasurementProbe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        r0.<tca.instrumentation.MeasurementProbe: java.lang.Integer currentSize> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements> = $r2;

        return;
    }

    public abstract void setSize(int);

    public java.util.HashMap getCountersForSize(java.lang.Integer)
    {
        tca.instrumentation.MeasurementProbe r0;
        java.lang.Integer r1;
        java.util.HashMap $r2, $r3, $r5, $r6, $r7;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: tca.instrumentation.MeasurementProbe;

        r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r7 = r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements>;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label1:
        $r3 = r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.util.HashMap) $r4;

        return $r5;
    }

    public java.util.HashMap getKeyMeasurements(java.lang.String)
    {
        tca.instrumentation.MeasurementProbe r0;
        java.lang.String r1;
        java.util.HashMap r2, $r5, $r6, $r10, $r14;
        java.util.Map$Entry r3;
        java.util.Iterator r4;
        java.util.Set $r7;
        boolean $z0, $z1;
        java.lang.Object $r8, $r9, $r11, $r13, $r15;
        java.lang.Integer $r12;
        java.lang.Long $r16;

        r0 := @this: tca.instrumentation.MeasurementProbe;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r2 = $r5;

        $r6 = r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.util.HashMap) $r9;

        $z1 = virtualinvoke $r10.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.Integer) $r11;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.HashMap) $r13;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r16 = (java.lang.Long) $r15;

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r16);

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r2;
    }

    public java.util.HashSet getKeys()
    {
        tca.instrumentation.MeasurementProbe r0;
        java.util.HashSet r1, $r6;
        java.util.Map$Entry r2;
        java.util.Iterator r3, r5;
        java.lang.String r4;
        java.util.HashMap $r7, $r11;
        java.util.Set $r8, $r12;
        boolean $z0, $z1;
        java.lang.Object $r9, $r10, $r13;

        r0 := @this: tca.instrumentation.MeasurementProbe;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r1 = $r6;

        $r7 = r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap measurements>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.HashMap) $r10;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.util.Set keySet()>();

        r5 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r13 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r13;

        virtualinvoke r1.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r1;
    }

    public void saveKeyMeasurements(java.io.File) throws java.io.IOException
    {
        tca.instrumentation.MeasurementProbe r0;
        java.io.File r1;
        java.io.FileWriter r2, $r7;
        java.lang.String r3, $r14, $r22;
        java.util.Iterator r4, r6;
        java.util.Map$Entry r5;
        java.util.HashSet $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r12, $r16, $r19;
        java.util.HashMap $r10;
        java.util.Set $r11;
        java.lang.StringBuilder $r13, $r15, $r17, $r18, $r20, $r21;

        r0 := @this: tca.instrumentation.MeasurementProbe;

        r1 := @parameter0: java.io.File;

        $r7 = new java.io.FileWriter;

        specialinvoke $r7.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        r2 = $r7;

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>("KEY,WORKLOAD_SIZE,COUNT\n");

        $r8 = virtualinvoke r0.<tca.instrumentation.MeasurementProbe: java.util.HashSet getKeys()>();

        r4 = virtualinvoke $r8.<java.util.HashSet: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r9;

        $r10 = virtualinvoke r0.<tca.instrumentation.MeasurementProbe: java.util.HashMap getKeyMeasurements(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r12;

        $r13 = new java.lang.StringBuilder;

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r19 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.FileWriter: void write(java.lang.String)>($r22);

     label3:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.io.FileWriter: void close()>();

        return;
    }
}
