public class tca.instrumentation.TCA_Counter extends tca.instrumentation.MeasurementProbe
{
    private static tca.instrumentation.TCA_Counter instance;

    static void <clinit>()
    {
        <tca.instrumentation.TCA_Counter: tca.instrumentation.TCA_Counter instance> = null;

        return;
    }

    private void <init>()
    {
        tca.instrumentation.TCA_Counter r0;

        r0 := @this: tca.instrumentation.TCA_Counter;

        specialinvoke r0.<tca.instrumentation.MeasurementProbe: void <init>()>();

        return;
    }

    public static tca.instrumentation.TCA_Counter getInstance()
    {
        tca.instrumentation.TCA_Counter $r0, $r1, $r2;

        $r0 = <tca.instrumentation.TCA_Counter: tca.instrumentation.TCA_Counter instance>;

        if $r0 != null goto label1;

        $r2 = new tca.instrumentation.TCA_Counter;

        specialinvoke $r2.<tca.instrumentation.TCA_Counter: void <init>()>();

        <tca.instrumentation.TCA_Counter: tca.instrumentation.TCA_Counter instance> = $r2;

     label1:
        $r1 = <tca.instrumentation.TCA_Counter: tca.instrumentation.TCA_Counter instance>;

        return $r1;
    }

    public void setSize(int)
    {
        tca.instrumentation.TCA_Counter r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: tca.instrumentation.TCA_Counter;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<tca.instrumentation.TCA_Counter: java.lang.Integer currentSize> = $r1;

        return;
    }

    private synchronized void incrementCounter(java.lang.String)
    {
        tca.instrumentation.TCA_Counter r0;
        java.lang.String r1;
        java.util.HashMap r2;
        java.lang.Integer $r3;
        boolean $z0;
        long $l0, $l1;
        java.lang.Object $r5;
        java.lang.Long r6, r7;

        r0 := @this: tca.instrumentation.TCA_Counter;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<tca.instrumentation.TCA_Counter: java.lang.Integer currentSize>;

        r2 = virtualinvoke r0.<tca.instrumentation.TCA_Counter: java.util.HashMap getCountersForSize(java.lang.Integer)>($r3);

        r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $z0 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        r6 = (java.lang.Long) $r5;

     label1:
        $l0 = virtualinvoke r6.<java.lang.Long: long longValue()>();

        $l1 = $l0 + 1L;

        r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

        return;
    }

    public static synchronized void probe(java.lang.String)
    {
        java.lang.String r0;
        tca.instrumentation.TCA_Counter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <tca.instrumentation.TCA_Counter: tca.instrumentation.TCA_Counter getInstance()>();

        specialinvoke $r1.<tca.instrumentation.TCA_Counter: void incrementCounter(java.lang.String)>(r0);

        return;
    }
}
